<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>{{.title}}</title>
  <meta name="description" content="query builder">


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow@0.0.48/dist/drawflow.min.css">
  <link rel="stylesheet" type="text/css" href="/assets/beautiful.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css" integrity="sha256-h20CPZ0QyXlBuAw7A+KluUYx/3pK+c7lYEpqLTlxjYQ=" crossorigin="anonymous" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
  <link href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css" rel="stylesheet" type="text/css">

  <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
  
    <link rel="stylesheet" type="text/css" href="/assets/normalize.css">
    <link rel="stylesheet" type="text/css" href="/assets/skeleton.css">
    <link rel="stylesheet" type="text/css" href="/assets/offside.css">

    <!-- <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/base.min.css"
    /> -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css"
    />

    <link rel="stylesheet" href="/assets/style.css">

</head>
<body>
  
  
    <nav id="my-menu">
      <div class="col">  
          <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="start">
              <i class="fas fa-genderless"></i><span> Start</span>
          </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="datasource">
          <i class="fas fa-database"></i><span> Data Source</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="dataget">
          <i class="fas fa-database"></i><span> Data Get</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="join">
          <i class="far fa-object-group"></i><span> Join</span>
        </div>
        <!-- <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="union">
          <i class="far fa-object-group"></i><span> Union</span>
        </div> -->
        <!-- <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="mutateadd">
          <i class="fas fa-exchange-alt"></i><span> MutateAdd</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="mutatechange">
          <i class="fas fa-exchange-alt"></i><span> MutateChange</span>
        </div> -->
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="filterbuild">
          <i class="fas fa-filter"></i><span> Filter</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="groupby">
          <i class="fas fa-layer-group"></i><span> GroupBy</span>
        </div>
        <!-- <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="aggregate">
          <i class="fas fa-calculator"></i><span> Aggregate</span>
        </div> -->
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="select">
          <i class="fas fa-columns"></i><span> Select</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="arrange">
          <i class="fas fa-sort-amount-up-alt"></i><span> Arrange</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="subset">
          <i class="fas fa-grip-lines"></i><span> Subset</span>
        </div>
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="rename">
          <i class="fas fa-signature"></i><span> Rename</span>
        </div>
        <!-- <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="output">
          <i class="fas fa-filter"></i><span> Output</span>
        </div> -->
        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="end">
          <i class="fas fa-genderless"></i><span> End</span>
        </div>
      </div>
    </nav>

    <div id="my-content-container">

  <div class="wrapper">

  
    <!-- <div class="col">

        <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="start">
            <i class="fas fa-genderless"></i><span> Start</span>
        </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="datasource">
        <i class="fas fa-database"></i><span> Data Source</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="dataget">
        <i class="fas fa-database"></i><span> Data Get</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="join">
        <i class="far fa-object-group"></i><span> Join</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="union">
        <i class="far fa-object-group"></i><span> Union</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="mutateadd">
        <i class="fas fa-exchange-alt"></i><span> MutateAdd</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="mutatechange">
        <i class="fas fa-exchange-alt"></i><span> MutateChange</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="filterbuild">
        <i class="fas fa-filter"></i><span> Filter</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="groupby">
        <i class="fas fa-layer-group"></i><span> GroupBy</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="aggregate">
        <i class="fas fa-calculator"></i><span> Aggregate</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="select">
        <i class="fas fa-columns"></i><span> Select</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="arrange">
        <i class="fas fa-sort-amount-up-alt"></i><span> Arrange</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="subset">
        <i class="fas fa-grip-lines"></i><span> Subset</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="rename">
        <i class="fas fa-signature"></i><span> Rename</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="output">
        <i class="fas fa-filter"></i><span> Output</span>
      </div>
      <div class="drag-drawflow" draggable="true" ondragstart="drag(event)" data-node="end">
        <i class="fas fa-genderless"></i><span> End</span>
      </div>
    </div> -->
    
    <!-- <button type="button" id="my-button" class="float"><i class="fas fa-plus"></i></button> -->
      
      <div id="drawflow" ondrop="drop(event)" ondragover="allowDrop(event)">

        
        <div class="btn-add" id="my-button">Commands</div>
        <!-- <div class="btn-export" onclick="">Export</div> -->
        <div class="btn-export" onclick="runCode(editor.export())">Run</div>
        <!-- <div class="btn-export" onclick="Swal.fire({ title: 'Export', html: '<pre><code>'+JSON.stringify(editor.export(), null,4)+'</code></pre>'})">Export</div> -->
        <div class="btn-clear" onclick="editor.clearModuleSelected()">Clear</div>

        <div class="btn-setting" id="my-button-settings">Settings</div>

        <div class="btn-lock">
          <i id="lock" class="fas fa-lock" onclick="editor.editor_mode='fixed'; changeMode('lock');"></i>
          <i id="unlock" class="fas fa-lock-open" onclick="editor.editor_mode='edit'; changeMode('unlock');" style="display:none;"></i>
        </div>
        <div class="bar-zoom">
          <i class="fas fa-search-minus" onclick="editor.zoom_out()"></i>
          <i class="fas fa-search" onclick="editor.zoom_reset()"></i>
          <i class="fas fa-search-plus" onclick="editor.zoom_in()"></i>
        </div>
      </div>
    <!-- </div> -->



</div>

<div class="row">
  <div class="column">
    DataSource Columns
    <div id="column-table"></div>
  </div>
</div>

</div>

<div id="my-menu-right">
  Settings
  <div id="settings-detail"></div>
</div>

  <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/jerosoler/Drawflow/dist/drawflow.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
  <!-- <script type="text/javascript" src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script> -->
  <!-- <script type="text/javascript" src="https://unpkg.com/micromodal/dist/micromodal.min.js"></script> -->
  <script type="text/javascript" src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/simple-datatables@latest" type="text/javascript"></script>

  <script src="https://unpkg.com/notie"></script>

  <script type="text/javascript" src="/assets/offside.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>

  <script>

      var myOffsideLeft = offside( '#my-menu', {

      slidingElementsSelector:'#my-content-container',
      buttonsSelector: '#my-button',
      slidingSide: 'left',
      });

      var myOffsideRight = offside( '#my-menu-right', {

        slidingElementsSelector:'#my-content-container',
        buttonsSelector: '#my-button-settings',
         slidingSide: 'right',
        });

    var columnTable = new Tabulator("#column-table", {
        height:45, // set height of table (in CSS or here), this enables the Virtual DOM and improves render speed dramatically (can be any valid css height value)
        data:[], //assign data to table
        placeholder:"No Datasource selected",
        layout:"fitColumns", //fit columns to width of table (optional)
        autoColumns:true,
        headerVisible:false,
      });

    var id = document.getElementById("drawflow");
    const editor = new Drawflow(id);
    editor.reroute = true;
    // const dataToImport = {"drawflow":{"Home":{"data":{"1":{"id":1,"name":"welcome","data":{},"class":"welcome","html":"\n    <div>\n      <div class=\"title-box\">👏 Welcome!!</div>\n      <div class=\"box\">\n        <p>Simple flow library <b>demo</b>\n        <a href=\"https://github.com/jerosoler/Drawflow\" target=\"_blank\">Drawflow</a> by <b>Jero Soler</b></p><br>\n\n        <p>Multiple input / outputs<br>\n           Data sync nodes<br>\n           Import / export<br>\n           Modules support<br>\n           Simple use<br>\n           Type: Fixed or Edit<br>\n           Events: view console<br>\n           Pure Javascript<br>\n        </p>\n        <br>\n        <p><b><u>Shortkeys:</u></b></p>\n        <p>🎹 <b>Delete</b> for remove selected<br>\n        💠 Mouse Left Click == Move<br>\n        ❌ Mouse Right == Delete Option<br>\n        🔍 Ctrl + Wheel == Zoom<br>\n        📱 Mobile support<br>\n        ...</p>\n      </div>\n    </div>\n    ","typenode": false, "inputs":{},"outputs":{},"pos_x":50,"pos_y":50},"2":{"id":2,"name":"slack","data":{},"class":"slack","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-slack\"></i> Slack chat message</div>\n          </div>\n          ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1028,"pos_y":87},"3":{"id":3,"name":"telegram","data":{"channel":"channel_2"},"class":"telegram","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-telegram-plane\"></i> Telegram bot</div>\n            <div class=\"box\">\n              <p>Send to telegram</p>\n              <p>select channel</p>\n              <select df-channel>\n                <option value=\"channel_1\">Channel 1</option>\n                <option value=\"channel_2\">Channel 2</option>\n                <option value=\"channel_3\">Channel 3</option>\n                <option value=\"channel_4\">Channel 4</option>\n              </select>\n            </div>\n          </div>\n          ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1032,"pos_y":184},"4":{"id":4,"name":"email","data":{},"class":"email","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-at\"></i> Send Email </div>\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"5","input":"output_1"}]}},"outputs":{},"pos_x":1033,"pos_y":439},"5":{"id":5,"name":"template","data":{"template":"Write your template"},"class":"template","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-code\"></i> Template</div>\n              <div class=\"box\">\n                Ger Vars\n                <textarea df-template></textarea>\n                Output template with vars\n              </div>\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"6","input":"output_1"}]}},"outputs":{"output_1":{"connections":[{"node":"4","output":"input_1"},{"node":"11","output":"input_1"}]}},"pos_x":607,"pos_y":304},"6":{"id":6,"name":"github","data":{"name":"https://github.com/jerosoler/Drawflow"},"class":"github","html":"\n          <div>\n            <div class=\"title-box\"><i class=\"fab fa-github \"></i> Github Stars</div>\n            <div class=\"box\">\n              <p>Enter repository url</p>\n            <input type=\"text\" df-name>\n            </div>\n          </div>\n          ","typenode": false, "inputs":{},"outputs":{"output_1":{"connections":[{"node":"5","output":"input_1"}]}},"pos_x":341,"pos_y":191},"7":{"id":7,"name":"facebook","data":{},"class":"facebook","html":"\n        <div>\n          <div class=\"title-box\"><i class=\"fab fa-facebook\"></i> Facebook Message</div>\n        </div>\n        ","typenode": false, "inputs":{},"outputs":{"output_1":{"connections":[{"node":"2","output":"input_1"},{"node":"3","output":"input_1"},{"node":"11","output":"input_1"}]}},"pos_x":347,"pos_y":87},"11":{"id":11,"name":"log","data":{},"class":"log","html":"\n            <div>\n              <div class=\"title-box\"><i class=\"fas fa-file-signature\"></i> Save log file </div>\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"5","input":"output_1"},{"node":"7","input":"output_1"}]}},"outputs":{},"pos_x":1031,"pos_y":363}}},"Other":{"data":{"8":{"id":8,"name":"personalized","data":{},"class":"personalized","html":"\n            <div>\n              Personalized\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"12","input":"output_1"},{"node":"12","input":"output_2"},{"node":"12","input":"output_3"},{"node":"12","input":"output_4"}]}},"outputs":{"output_1":{"connections":[{"node":"9","output":"input_1"}]}},"pos_x":764,"pos_y":227},"9":{"id":9,"name":"dbclick","data":{"name":"Hello World!!"},"class":"dbclick","html":"\n            <div>\n            <div class=\"title-box\"><i class=\"fas fa-mouse\"></i> Db Click</div>\n              <div class=\"box dbclickbox\" ondblclick=\"showpopup(event)\">\n                Db Click here\n                <div class=\"modal\" style=\"display:none\">\n                  <div class=\"modal-content\">\n                    <span class=\"close\" onclick=\"closemodal(event)\">&times;</span>\n                    Change your variable {name} !\n                    <input type=\"text\" df-name>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[{"node":"8","input":"output_1"}]}},"outputs":{"output_1":{"connections":[{"node":"12","output":"input_2"}]}},"pos_x":209,"pos_y":38},"12":{"id":12,"name":"multiple","data":{},"class":"multiple","html":"\n            <div>\n              <div class=\"box\">\n                Multiple!\n              </div>\n            </div>\n            ","typenode": false, "inputs":{"input_1":{"connections":[]},"input_2":{"connections":[{"node":"9","input":"output_1"}]},"input_3":{"connections":[]}},"outputs":{"output_1":{"connections":[{"node":"8","output":"input_1"}]},"output_2":{"connections":[{"node":"8","output":"input_1"}]},"output_3":{"connections":[{"node":"8","output":"input_1"}]},"output_4":{"connections":[{"node":"8","output":"input_1"}]}},"pos_x":179,"pos_y":272}}}}}
    editor.start();
    // editor.import(dataToImport);

    // Events!
    editor.on('nodeCreated', function(id) {
      console.log("Node created " + id);

      let node = editor.getNodeFromId(id);

      let innerHTML = "";

      switch (node.name) {
        case "start":
          innerHTML = `<div> Start Flow </div>`
          break;
        case "end":
          innerHTML = `<div> End Flow </div>`
          break;     
        default:
          innerHTML = `<div> `+ node.name +`</div><div> Please create connections for available options </div>`
          break;
      }


      document.getElementById("settings-detail").innerHTML = innerHTML;
    })

    editor.on('nodeRemoved', function(id) {
      console.log("Node removed " + id);
      document.getElementById("settings-detail").innerHTML = "";
    })

    // editor.on('nodeSelected', function(id) {

    //   let node = editor.getNodeFromId(id);

    //   console.log(node);

    //   if (node.name == "start" || node.name == "end") {
    //       // document.getElementById("settings-detail").innerHTML = `<div>`+ node.name +`</div>`;
    //       return
    //   }

    //   if (node.inputs.input_1.connections.length == 0) {
    //       // document.getElementById("settings-detail").innerHTML = `<div>no connections</div>`;
    //       notie.alert({ type: 'warning', text: 'no connections' })
    //       return
    //   }
    //   // document.getElementById("settings-detail").innerHTML = "";

    //   // Swal.fire({
    //   //   title: 'Error!',
    //   //   text: 'Do you want to continue',
    //   //   icon: 'error',
    //   //   confirmButtonText: 'Cool'
    //   // })

    //   // return
    //   myOffsideLeft.close();
    //   myOffsideRight.open();


    //   let nodeparent = editor.getNodeFromId(node.inputs.input_1.connections[0].node);

    //   if (typeof node.data.columns != "undefined" && node.data.columns != null) {
    //           columnTable.setData(node.data.columns);
    //       } else {
    //           columnTable.setData([]);
    //       }

    //   switch (node.name) {
    //     case "datasource":
    //         datasourceBuild(node.id, node.data);
    //       break;
    //     case "dataget":
    //     if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //         // if parent node doesnt contain columns nok
    //         if (typeof nodeparent.data.tables == "undefined" && nodeparent.data.tables == null) {
    //           document.getElementById("settings-detail").innerHTML = `<div>no datasource connected</div>`;
    //           return
    //         }
    //         if (nodeparent.name != "datasource") {
    //             document.getElementById("settings-detail").innerHTML = `<div>parent must be datasource</div>`;
    //             return
    //           }

    //         datagetBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "filterbuild":

    //           // console.log("here");

    //         if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //         // if parent node doesnt contain columns nok
    //         if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //           document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //           return
    //         }
    //         filterAndBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "select":
    //     if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
    //           selectBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "arrange":
    //     if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
    //           arrangeBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "subset":
    //     if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
    //           subsetBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "rename":

    //         if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }

    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
    //           renameBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     case "join":
    //         if (node.inputs.input_1.connections.length != 2) {
    //             document.getElementById("settings-detail").innerHTML = `<div>need 2 datasources</div>`;
    //             return
    //           }

    //           let nodeparentB = editor.getNodeFromId(node.inputs.input_1.connections[1].node);

    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
              
    //           if (typeof nodeparentB.data.columns == "undefined" && nodeparentB.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
              
    //           joinBuild(node.id, node.data, nodeparent.data, nodeparentB.data);
    //       break;
    //     case "groupby":
    //     if (node.inputs.input_1.connections.length != 1) {
    //             document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //             return
    //           }
    //           // if parent node doesnt contain columns nok
    //           if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //             document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //             return
    //           }
    //           groupbyBuild(node.id, node.data, nodeparent.data);
    //       break;
    //     // case "aggregate":
    //     // if (node.inputs.input_1.connections.length != 1) {
    //     //         document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
    //     //         return
    //     //       }
    //     //     // if parent node doesnt contain columns nok
    //     //     if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
    //     //       document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
    //     //       return
    //     //     }

    //     //     let typer = "groupby";
    //     //     // if (nodeparent.name != "groupby" || nodeparent.name != "aggregate") {
    //     //     if (nodeparent.name != "groupby") {
    //     //       if (nodeparent.name != "aggregate") {
    //     //         document.getElementById("settings-detail").innerHTML = `<div>parent must be groupby or aggregate node</div>`;
    //     //         return
    //     //       } else {
    //     //         typer = "aggregate";
    //     //       }
              
    //     //     }

    //     //     aggregateBuild(node.id, node.data, nodeparent.data, nodeparent.id, typer);
    //     //   break;
    //     default:
    //       break;
    //   }

    // })

    editor.on('moduleCreated', function(name) {
      console.log("Module Created " + name);
    })

    editor.on('moduleChanged', function(name) {
      console.log("Module Changed " + name);
    })

    // editor.on('contextmenu', function(event) {
    //   console.log(event.path[3].id.substring(5));
    // })

    editor.on('connectionCreated', function(connection) {
      console.log('Connection created');
      // console.log(connection);


      // let node = editor.getNodeFromId(connection.input_id);
      // let nodeparent = editor.getNodeFromId(connection.output_id);

      // if (node.name == "start" || node.name == "end") {
      //     document.getElementById("settings-detail").innerHTML = `<div>`+ node.name +`</div>`;
      //     return
      // }

      // if (node.inputs.input_1.connections.length == 0) {
      //     document.getElementById("settings-detail").innerHTML = `<div>no connections</div>`;
      //     return
      // }
      // document.getElementById("settings-detail").innerHTML = "";

      // switch (node.name) {
      //   case "datasource":
      //       datasourceBuild(node.id, node.data);
      //     break;
      //   case "dataget":
      //       if (typeof nodeparent.data.tables == "undefined" && nodeparent.data.tables == null) {
      //             document.getElementById("settings-detail").innerHTML = `<div>no datasource connected</div>`;
      //             return
      //           }

      //           if (nodeparent.name != "datasource") {
      //           document.getElementById("settings-detail").innerHTML = `<div>parent must be datasource</div>`;
      //           return
      //         }

      //       datagetBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "filterbuild":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       filterAndBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "select":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       selectBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "arrange":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       arrangeBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "subset":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       subsetBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "rename":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       renameBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "join":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       if (node.inputs.input_1.connections.length != 2) {
      //           document.getElementById("settings-detail").innerHTML = `<div>need 2 datasources</div>`;
      //           return
      //         }
      //       let nodeparentA = editor.getNodeFromId(node.inputs.input_1.connections[0].node);
      //       joinBuild(node.id, node.data, nodeparentA.data, nodeparent.data);
      //     break;
      //   case "groupby":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       groupbyBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   case "aggregate":
      //       // if parent node doesnt contain columns nok
      //       if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
      //         document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
      //         return
      //       }
      //       if (nodeparent.name != "groupby") {
      //         document.getElementById("settings-detail").innerHTML = `<div>parent must be groupby node</div>`;
      //         return
      //       }
      //       aggregateBuild(node.id, node.data, nodeparent.data);
      //     break;
      //   default:
      //     break;
      // }
      
    })

    editor.on('connectionRemoved', function(connection) {
      console.log('Connection removed');
      // console.log(connection);
      document.getElementById("settings-detail").innerHTML = "";
    })

    editor.on('mouseMove', function(position) {
      // console.log('Position mouse x:' + position.x + ' y:'+ position.y);
    })

    editor.on('nodeMoved', function(id) {
      console.log("Node moved " + id);
    })

    editor.on('zoom', function(zoom) {
      console.log('Zoom level ' + zoom);
    })

    editor.on('translate', function(position) {
      console.log('Translate x:' + position.x + ' y:'+ position.y);
    })

    editor.on('addReroute', function(id) {
      console.log("Reroute added " + id);
    })

    editor.on('removeReroute', function(id) {
      console.log("Reroute removed " + id);
    })

    editor.on('nodeUnselected', function(id) {
      // console.log("Reroute removed " + id);
      myOffsideLeft.close();
      myOffsideRight.close();
    })

    /* DRAG EVENT */

    /* Mouse and Touch Actions */

    var elements = document.getElementsByClassName('drag-drawflow');
    for (var i = 0; i < elements.length; i++) {
      elements[i].addEventListener('touchend', drop, false);
      elements[i].addEventListener('touchmove', positionMobile, false);
      elements[i].addEventListener('touchstart', drag, false );
    }

    var mobile_item_selec = '';
    var mobile_last_move = null;
   function positionMobile(ev) {
     mobile_last_move = ev;
   }

   function allowDrop(ev) {
      ev.preventDefault();
    }

    function drag(ev) {
      if (ev.type === "touchstart") {
        mobile_item_selec = ev.target.closest(".drag-drawflow").getAttribute('data-node');
      } else {
      ev.dataTransfer.setData("node", ev.target.getAttribute('data-node'));
      }
    }

    function drop(ev) {
      if (ev.type === "touchend") {
        var parentdrawflow = document.elementFromPoint( mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY).closest("#drawflow");
        if(parentdrawflow != null) {
          addNodeToDrawFlow(mobile_item_selec, mobile_last_move.touches[0].clientX, mobile_last_move.touches[0].clientY);
        }
        mobile_item_selec = '';
      } else {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("node");
        addNodeToDrawFlow(data, ev.clientX, ev.clientY);
      }

    }

    function runCode(data) {

        let endData = data.drawflow.Home.data;
        let list = Object.values(endData);

        let startCommand;
        let joinBuild = 0;
        let newDataSendBuild = [];

        // need to find start command
        for (var i = 0; i < list.length; i++) {
          if (list[i].name == "start") {
            startCommand = list[i];
          }

        }

        function recurse(node, filterorID) {

          


              for (var i = 0; i < list.length; i++) {

                if (list[i].id == node.id && list[i].data.code != "SKIP" )  {
                  

                  if (list[i].name != "filteror") {
                    newDataSendBuild.push(list[i]);
                  }

                }
              }

              for(var i = 0, count = node.outputs.output_1.connections.length; i < count; i++) {

                for (var i2 = 0; i2 < list.length; i2++) {

                  if (list[i2].id == parseInt(node.outputs.output_1.connections[i].node))  {

                    if (list[i2].name != "end") {

                      if (list[i2].name != "join") {
                        recurse(list[i2]);
                      }

                      if (list[i2].name == "join") {

                        joinBuild = joinBuild + 1;

                        if (joinBuild%2 == 0) {
                          recurse(list[i2]);
                        }

                      }


                      
                    }
                  }
                }

                  
              }
          }

        recurse(startCommand);
        

        console.log("BUILER--------------------");
        console.log(newDataSendBuild);

        function updater(data) {
          console.log(data);
          notie.alert({ type: 'success', text: data, time: 1 });

        }

        fetch('/datarun', {
              method: 'post',
                    headers: {
                        "Content-type": 'application/json'
                    },
                    body: JSON.stringify(newDataSendBuild)
            })
            .then(response => response.json())
            .then(data => (data.response == "200") ? updater(data.data) : console.log('error', data.msg));

    }

    function openSettings(event) {
        console.log(event.path[3].id.substring(5));

        let id = event.path[3].id.substring(5);

        let node = editor.getNodeFromId(id);

      console.log(node);

      if (node.name == "start" || node.name == "end") {
          // document.getElementById("settings-detail").innerHTML = `<div>`+ node.name +`</div>`;
          return
      }

      if (node.inputs.input_1.connections.length == 0) {
          // document.getElementById("settings-detail").innerHTML = `<div>no connections</div>`;
          notie.alert({ type: 'warning', text: 'no connections', time: 1 });
          return
      }
      // document.getElementById("settings-detail").innerHTML = "";

      // Swal.fire({
      //   title: 'Error!',
      //   text: 'Do you want to continue',
      //   icon: 'error',
      //   confirmButtonText: 'Cool'
      // })

      // return
      myOffsideLeft.close();
      myOffsideRight.open();


      let nodeparent = editor.getNodeFromId(node.inputs.input_1.connections[0].node);

      // if (typeof node.data.columns != "undefined" && node.data.columns != null) {
      //         columnTable.setData(node.data.columns);
      //     } else {
      //         columnTable.setData([]);
      //     }

      switch (node.name) {
        case "datasource":
            datasourceBuild(node.id, node.data);
          break;
        case "dataget":
        if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
            // if parent node doesnt contain columns nok
            if (typeof nodeparent.data.tables == "undefined" && nodeparent.data.tables == null) {
              document.getElementById("settings-detail").innerHTML = `<div>no datasource connected</div>`;
              return
            }
            if (nodeparent.name != "datasource") {
                document.getElementById("settings-detail").innerHTML = `<div>parent must be datasource</div>`;
                return
              }

            datagetBuild(node.id, node.data, nodeparent.data);
          break;
        case "filterbuild":

              // console.log("here");

            if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
            // if parent node doesnt contain columns nok
            if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
              document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
              return
            }
            filterAndBuild(node.id, node.data, nodeparent.data);
          break;
        case "select":
        if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              selectBuild(node.id, node.data, nodeparent.data);
          break;
        case "arrange":
        if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              arrangeBuild(node.id, node.data, nodeparent.data);
          break;
        case "subset":
        if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              subsetBuild(node.id, node.data, nodeparent.data);
          break;
        case "rename":

            if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }

              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              renameBuild(node.id, node.data, nodeparent.data);
          break;
        case "join":
            if (node.inputs.input_1.connections.length != 2) {
                document.getElementById("settings-detail").innerHTML = `<div>need 2 datasources</div>`;
                return
              }

              let nodeparentB = editor.getNodeFromId(node.inputs.input_1.connections[1].node);

              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              
              if (typeof nodeparentB.data.columns == "undefined" && nodeparentB.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              
              joinBuild(node.id, node.data, nodeparent.data, nodeparentB.data);
          break;
        case "groupby":
        if (node.inputs.input_1.connections.length != 1) {
                document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
                return
              }
              // if parent node doesnt contain columns nok
              if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
                document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
                return
              }
              groupbyBuild(node.id, node.data, nodeparent.data);
          break;
        // case "aggregate":
        // if (node.inputs.input_1.connections.length != 1) {
        //         document.getElementById("settings-detail").innerHTML = `<div>only 1 parent</div>`;
        //         return
        //       }
        //     // if parent node doesnt contain columns nok
        //     if (typeof nodeparent.data.columns == "undefined" && nodeparent.data.columns == null) {
        //       document.getElementById("settings-detail").innerHTML = `<div>no datasource columns</div>`;
        //       return
        //     }

        //     let typer = "groupby";
        //     // if (nodeparent.name != "groupby" || nodeparent.name != "aggregate") {
        //     if (nodeparent.name != "groupby") {
        //       if (nodeparent.name != "aggregate") {
        //         document.getElementById("settings-detail").innerHTML = `<div>parent must be groupby or aggregate node</div>`;
        //         return
        //       } else {
        //         typer = "aggregate";
        //       }
              
        //     }

        //     aggregateBuild(node.id, node.data, nodeparent.data, nodeparent.id, typer);
        //   break;
        default:
          break;
      }


    }
    
    function addNodeToDrawFlow(name, pos_x, pos_y) {
      if(editor.editor_mode === 'fixed') {
        return false;
      }
      pos_x = pos_x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));
      pos_y = pos_y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));

      switch (name) {
        case 'datasource':
        var datasourcetemp = `
        <div>
          <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-database"></i> datasource</div>
        </div>
        `;
          editor.addNode('datasource', 1,  1, pos_x, pos_y, 'datasource', {"code": 'SKIP'}, datasourcetemp );
          break;
      case 'dataget':
        var datagettemp = `
        <div>
          <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-database"></i> dataget</div>
        </div>
        `;
          editor.addNode('dataget', 1,  1, pos_x, pos_y, 'dataget', {"code": '#00#'}, datagettemp );
          break;
        case 'join':
          var jointemp = `
          <div>
            <div class="title-box" ondblclick="openSettings(event)"><i class="far fa-object-group"></i> join</div>
          </div>
          `
          editor.addNode('join', 1, 1, pos_x, pos_y, 'join', {"code": '#01#'}, jointemp );
          break;
        case 'mutateadd':
          var mutateaddtemp = `
          <div>
            <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-exchange-alt"></i> mutateadd</div>
          </div>
          `;
          editor.addNode('mutateadd', 1, 1, pos_x, pos_y, 'mutateadd', {"code": '#02#'}, mutateaddtemp );
          break;
        case 'mutatechange':
          var mutatechangetemp = `
          <div>
            <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-exchange-alt"></i> mutatechange</div>
          </div>
          `;
          editor.addNode('mutatechange', 1, 1, pos_x, pos_y, 'mutatechange', {"code": '#03#'}, mutatechangetemp );
          break;
        case 'filterbuild':
          var filterbuildtemp = `
          <div>
            <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-filter"></i> Filter Build</div>
          </div>
          `;
          editor.addNode('filterbuild', 1, 1, pos_x, pos_y, 'filterbuild', {"code": '#04#', "optionscount" : 1}, filterbuildtemp );
          break;
        case 'groupby':
          var groupbytemp = `
          <div>
            <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-layer-group"></i> GroupBy </div>
          </div>
          `;
          editor.addNode('groupby', 1, 1, pos_x, pos_y, 'groupby', {"code": '#06#'}, groupbytemp );
          break;
        case 'aggregate':
            var aggregatemp = `
            <div>
              <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-calculator"></i> aggregate </div>
            </div>
            `;
            editor.addNode('aggregate', 1, 1, pos_x, pos_y, 'aggregate', {"code": '#07#'}, aggregatemp );
            break;
          case 'select':
            var selecttemp = `
            <div>
              <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-columns"></i> select </div>             
            </div>
            `;

            editor.addNode('select', 1, 1, pos_x, pos_y, 'select', {"code": '#10#'}, selecttemp );
            break;

          case 'arrange':
            var arrangetemp = `
            <div>
              <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-sort-amount-up-alt"></i> arrange</div>
            </div>
            `;
            editor.addNode('arrange', 1, 1, pos_x, pos_y, 'arrange', {"code": '#11#'}, arrangetemp );
            break;
          case 'subset':
            var subsettemp = `
            <div>
                <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-grip-lines"></i> subset</div>
            </div>
            `;
            editor.addNode('subset', 1, 1, pos_x, pos_y, 'subset', {"code": '#12#'}, subsettemp );
            break;
          case 'rename':
            var renametemp = `
            <div>
                <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-signature"></i> rename</div>
            </div>
            `;
            editor.addNode('rename', 1, 1, pos_x, pos_y, 'rename', {"code": '#13#'}, renametemp );
            break;
        case 'start':
            var starttemp = `
            <div>
                <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-genderless"></i> start</div>
            </div>
            `;
            editor.addNode('start', 0, 1, pos_x, pos_y, 'start', {"code": 'SKIP'}, starttemp );
            break;
        case 'end':
            var endtemp = `
            <div>
                <div class="title-box" ondblclick="openSettings(event)"><i class="fas fa-genderless"></i> end</div>
            </div>
            `;
            editor.addNode('end', 1, 0, pos_x, pos_y, 'end', {"code": 'SKIP'}, endtemp );
            break;
          case 'dbclick':
            var dbclick = `
            <div>
            <div class="title-box"><i class="fas fa-mouse"></i> Db Click</div>
              <div class="box dbclickbox" ondblclick="showpopup(event)">
                Db Click here
                <div class="modal" style="display:none">
                  <div class="modal-content">
                    <span class="close" onclick="closemodal(event)">&times;</span>
                    Change your variable {name} !
                    <input type="text" df-name>
                  </div>

                </div>
              </div>
            </div>
            `;
            editor.addNode('dbclick', 1, 1, pos_x, pos_y, 'dbclick', { name: ''}, dbclick );
            break;

        default:
      }
    }

  var transform = '';
  function showpopup(e) {
    e.target.closest(".drawflow-node").style.zIndex = "9999";
    e.target.children[0].style.display = "block";
    //document.getElementById("modalfix").style.display = "block";

    //e.target.children[0].style.transform = 'translate('+translate.x+'px, '+translate.y+'px)';
    transform = editor.precanvas.style.transform;
    editor.precanvas.style.transform = '';
    editor.precanvas.style.left = editor.canvas_x +'px';
    editor.precanvas.style.top = editor.canvas_y +'px';
    console.log(transform);

    //e.target.children[0].style.top  =  -editor.canvas_y - editor.container.offsetTop +'px';
    //e.target.children[0].style.left  =  -editor.canvas_x  - editor.container.offsetLeft +'px';
    editor.editor_mode = "fixed";

  }

   function closemodal(e) {
     e.target.closest(".drawflow-node").style.zIndex = "2";
     e.target.parentElement.parentElement.style.display  ="none";
     //document.getElementById("modalfix").style.display = "none";
     editor.precanvas.style.transform = transform;
       editor.precanvas.style.left = '0px';
       editor.precanvas.style.top = '0px';
      editor.editor_mode = "edit";
   }

    function changeModule(event) {
      var all = document.querySelectorAll(".menu ul li");
        for (var i = 0; i < all.length; i++) {
          all[i].classList.remove('selected');
        }
      event.target.classList.add('selected');
    }

    function changeMode(option) {

    //console.log(lock.id);
      if(option == 'lock') {
        lock.style.display = 'none';
        unlock.style.display = 'block';
      } else {
        lock.style.display = 'block';
        unlock.style.display = 'none';
      }

    }

    function datasourceBuild(id, nodeData){

      let inner = `<form>
        <div class="row">
          <div class="column">
            <label for="ds-source">source</label>
            <input class="u-full-width" type="text" id="ds-source" value="${(nodeData.source) ? nodeData.source : 'tester'}">
            <label for="ds-dataconnection">Connection</label>
            <select class="u-full-width" id="ds-dataconnection">
                <option ${(nodeData.dataconnection == 'PS') ? 'selected' : ''} value="PS">PS</option>
              </select>
            <label for="ds-db-host">host</label>
            <input class="u-full-width" type="text" id="ds-db-host" value="${(nodeData.dbhost) ? nodeData.dbhost : 'hh-pgsql-public.ebi.ac.uk'}">
            <label for="ds-db-port">port</label>
            <input class="u-full-width" type="text" id="ds-db-port" value="${(nodeData.dbport) ? nodeData.dbport : '5432'}">
            <label for="ds-db-user">user</label>
            <input class="u-full-width" type="text" id="ds-db-user" value="${(nodeData.dbuser) ? nodeData.dbuser : 'reader'}">
            <label for="ds-db-password">password</label>
            <input class="u-full-width" type="text" id="ds-db-password" value="${(nodeData.dbpassword) ? nodeData.dbpassword : 'NWDMCE5xdipIjRrp'}">
            <label for="ds-db-database">database</label>
            <input class="u-full-width" type="text" id="ds-db-database" value="${(nodeData.dbdatabase) ? nodeData.dbdatabase : 'pfmegrnargs'}">
          </div>
          </div>
        </form>
        <a class="button button-primary" id="ds-save" href="#">Save</a>
        `;

        document.getElementById("settings-detail").innerHTML = inner;

        document.getElementById("ds-save").addEventListener("click", function (event) {
            event.preventDefault();

            var sendD = new Object();

            sendD.source = document.getElementById("ds-source").value;
            sendD.dataconnection = document.getElementById("ds-dataconnection").value;
            sendD.dbhost = document.getElementById("ds-db-host").value;
            sendD.dbport = document.getElementById("ds-db-port").value;
            sendD.dbuser = document.getElementById("ds-db-user").value;
            sendD.dbpassword = document.getElementById("ds-db-password").value;
            sendD.dbdatabase = document.getElementById("ds-db-database").value;

            function updater(cols) {

              nodeData.source = document.getElementById("ds-source").value;
              nodeData.dataconnection = document.getElementById("ds-dataconnection").value;
              nodeData.dbhost = document.getElementById("ds-db-host").value;
              nodeData.dbport = document.getElementById("ds-db-port").value;
              nodeData.dbuser = document.getElementById("ds-db-user").value;
              nodeData.dbpassword = document.getElementById("ds-db-password").value;
              nodeData.dbdatabase = document.getElementById("ds-db-database").value;
              nodeData.tables = cols.Tables;

              editor.updateNodeDataFromId(id, nodeData);

              myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });

            }


            fetch('/gettables', {
              method: 'post',
                    headers: {
                        "Content-type": 'application/json'
                    },
                    body: JSON.stringify(sendD)
            })
            .then(response => response.json())
            .then(data => (data.response == "200") ? updater(data.data) : console.log('error', data.msg));

        });

    }

    function datagetBuild(id, nodeData, parentData){

        let inner = `<form>
          <div class="row">
            <div class="column">

              <label for="dg-dataname">Data Name</label>
            <input class="u-full-width" type="text" id="dg-dataname" value="${(nodeData.source) ? nodeData.source : 'tableA'}">

              <label for="dg-table">Data Table</label>
              <select class="u-full-width" id="dg-table">
                <option ${(nodeData.table == 'CUSTOM') ? 'selected' : ''} value="CUSTOM">CUSTOM</option>
              </select>

              <label for="dg-sql">SQL</label>
              <textarea class="u-full-width" id="dg-sql">${(nodeData.dbsql) ? nodeData.dbsql : 'SELECT * FROM xref LIMIT 5;'}</textarea>
            </div>
            </div>
          </form>
          <a class="button button-primary" id="dg-save" href="#">Save</a>
          `;

          document.getElementById("settings-detail").innerHTML = inner;

          parentData.tables[0].forEach(function(element) {
              var x = document.getElementById("dg-table");
                var option = document.createElement("option");
                option.text = element;
                option.value = element;

                if (element == nodeData.table) {
                  option.selected = true;
                }

                x.add(option);
            });

          document.getElementById("dg-save").addEventListener("click", function (event) {
              event.preventDefault();


              // console.log("here");
              // console.log(nodeData);

              var sendD = new Object();

              sendD.table = document.getElementById("dg-table").value;
              sendD.dbsql = document.getElementById("dg-sql").value;

              sendD.source = parentData.source + "." + document.getElementById("dg-dataname").value + "_" + id;
              sendD.dataconnection = parentData.dataconnection;
              sendD.dbhost = parentData.dbhost;
              sendD.dbport = parentData.dbport;
              sendD.dbuser = parentData.dbuser;
              sendD.dbpassword = parentData.dbpassword;
              sendD.dbdatabase = parentData.dbdatabase;

              function updater(cols) {

                

              nodeData.table = document.getElementById("dg-table").value;
              nodeData.dbsql = document.getElementById("dg-sql").value;
              
              nodeData.source = parentData.source + "." + document.getElementById("dg-dataname").value + "_" + id;
              nodeData.dataconnection = parentData.dataconnection;
              nodeData.dbhost = parentData.dbhost;
              nodeData.dbport = parentData.dbport;
              nodeData.dbuser = parentData.dbuser;
              nodeData.dbpassword = parentData.dbpassword;
              nodeData.dbdatabase = parentData.dbdatabase;


              let newcolumnNames = [];
              let newcolumnsBuild = [];

              console.log(cols);

                for (let index = 0; index < cols.Columns[0].length; index++) {
                  console.log(cols.Columns[0][index]);
                  newcolumnNames.push(nodeData.source + "." + cols.Columns[0][index]);
                  
                }

                newcolumnsBuild.push(newcolumnNames);

                // nodeData.columns = cols.Columns;
                nodeData.columns = newcolumnsBuild;

                editor.updateNodeDataFromId(id, nodeData);  

                myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
              }


              fetch('/getcolumns', {
                method: 'post',
                      headers: {
                          "Content-type": 'application/json'
                      },
                      body: JSON.stringify(sendD)
              })
              .then(response => response.json())
              .then(data => (data.response == "200") ? updater(data.data) : console.log('error', data.msg));

          });

        }

        let dataTableFilter;
    
    function deleteRowFilter(rowId) {
                console.log(rowId);
                dataTableFilter.rows().remove(rowId);
                document.getElementById("fa-optionscount").value = dataTableFilter.data.length;
              }
    
    
        function filterAndBuild(id, nodeData, parentData){

        // console.log(nodeData.optionscount);

          let inner = `<form>
            <div class="row">
              <div class="column">
                <label for="fa-type">Type</label>
                <select class="u-full-width" id="fa-type">
                  <option selected value="And">And</option>
                  <option value="Or">Or</option>
                </select>
                <label for="fa-column">Column</label>
                <select class="u-full-width" id="fa-column">
                </select>
                <label for="fa-operator">Operator</label>
                <select class="u-full-width" id="fa-operator">
                  <option value="Eq">Eq</option>
                  <option value="Neq">Neq</option>
                  <option value="Greater">Greater</option>
                  <option value="GreaterEq">GreaterEq</option>
                  <option value="Less">Less</option>
                  <option value="LessEq">LessEq</option>
                </select>

                <label for="fa-value">Value</label>
                <input class="u-full-width" type="text" id="fa-value">
                
              </div>
              </div>
            <div class="row"></div>
            </form>
            <input class="u-full-width" type="number" id="fa-optionscount" value="${(nodeData.optionscount) ? nodeData.optionscount : '0'}">
            <div id="additionRows" hidden>
              <a class="button button-primary" id="fa-add" href="#">Add</a>
              <table id="filter-table"><thead>
                <tr>
                  <th>Column</th>
                  <th>Operator</th>
                  <th>Value</th>
                  <th>Delete</th>
                </tr>
              </thead><tbody></tbody></table>
            </div>
            
            <a class="button button-primary" id="fa-save" href="#">Save</a>
            `;

            document.getElementById("settings-detail").innerHTML = inner;

            dataTableFilter = new simpleDatatables.DataTable("#filter-table", {
                searchable: false,
                fixedHeight: false,
            });
           
            parentData.columns[0].forEach(function(element) {
              var x = document.getElementById("fa-column");
                var option = document.createElement("option");
                option.text = element;
                option.value = element;

                if (element == nodeData.column) {
                  option.selected = true;
                }

                x.add(option);
            });


            if (typeof nodeData.filters != 'undefined' ) {

                if (nodeData.filters.length > 1) {
                  document.getElementById("additionRows").hidden = false;

                  for (var i = 0; i < nodeData.filters.length; i++) {

                    dataTableFilter.rows().add([
                          nodeData.filters[i].column,
                          nodeData.filters[i].operator,
                          nodeData.filters[i].value,
                          `<button type='button' onclick="deleteRowFilter(${i})" data-row='${i}'>Y</button>`,
                    ]);

                    document.getElementById("fa-optionscount").value = dataTableFilter.data.length;

                  }

                } else {
                    document.getElementById("fa-column").value = nodeData.filters[0].column;
                    document.getElementById("fa-operator").value = nodeData.filters[0].operator;
                    document.getElementById("fa-value").value = nodeData.filters[0].value;
                }
              }

            document.getElementById("fa-type").addEventListener("change", function (event) {
              event.preventDefault();

              if (event.target.options[event.target.selectedIndex].value == "Or") {
                document.getElementById("additionRows").hidden = false;
              } else {
                document.getElementById("additionRows").hidden = true;
              }

            })

            document.getElementById("fa-add").addEventListener("click", function (event) {
                event.preventDefault();

                dataTableFilter.rows().add([
                      document.getElementById("fa-column").value,
                      document.getElementById("fa-operator").value,
                      document.getElementById("fa-value").value,
                      `<button type='button' onclick="deleteRowFilter(${dataTableFilter.data.length})" data-row='${dataTableFilter.data.length}'>Y</button>`,
                  ]);

                  document.getElementById("fa-optionscount").value = dataTableFilter.data.length;


            });

            document.getElementById("fa-save").addEventListener("click", function (event) {
                event.preventDefault();

                nodeData.filters = [];

                if (document.getElementById("fa-type").options[document.getElementById("fa-type").selectedIndex].value == "Or") {
                  for (var i = 0; i < dataTableFilter.data.length; i++) {
                    let d = [].slice.call(dataTableFilter.data[i].cells).map(function(cell) { return cell.textContent;});
                    let mapp = {
                      "column": d[0],
                      "operator" : d[1],
                      "value": d[2]
                    }
                    nodeData.filters.push(mapp);
                  }
                } else {
                  let mapp = {
                      "column": document.getElementById("fa-column").value,
                      "operator" : document.getElementById("fa-operator").value,
                      "value": document.getElementById("fa-value").value
                    }
                    nodeData.filters.push(mapp);
                }
                
                nodeData.columns = parentData.columns;
                nodeData.source = parentData.source;

                editor.updateNodeDataFromId(id, nodeData);  

                myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command' , time: 1});
            });
          }

    function arrangeBuild(id, nodeData, parentData){

            let inner = `<form>
                        <div class="row">
                          <div class="column">
                            <label for="ar-column">Column</label>
                            <select class="u-full-width" id="ar-column">
                            </select>
                            <label for="ar-direction">direction</label>
                          <select class="u-full-width" id="ar-direction">
                            <option ${(nodeData.direction == 'ASC') ? 'selected' : ''} value="ASC">ASC</option>
                            <option ${(nodeData.direction == 'DESC') ? 'selected' : ''} value="DESC">DESC</option>
                          </select>
                          </div>
                          </div>
                        </form>
                        <a class="button button-primary" id="ar-save" href="#">Save</a>
                        `;

              document.getElementById("settings-detail").innerHTML = inner;

              parentData.columns[0].forEach(function(element) {
              var x = document.getElementById("ar-column");
                var option = document.createElement("option");
                option.text = element;
                option.value = element;

                if (element == nodeData.column) {
                  option.selected = true;
                }

                x.add(option);
            });


              document.getElementById("ar-save").addEventListener("click", function (event) {
                  event.preventDefault();

                  nodeData.column = document.getElementById("ar-column").value;
                  nodeData.direction = document.getElementById("ar-direction").value;
                  nodeData.columns = parentData.columns;
                  nodeData.source = parentData.source;

                  editor.updateNodeDataFromId(id, nodeData);  

                  myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
              });

            }

    function subsetBuild(id, nodeData, parentData){

      let inner = `<form>
                  <div class="row">
                    <div class="column">
                      <label for="ss-direction">Column</label>
                      <select class="u-full-width" id="ss-direction">
                      <option ${(nodeData.direction == 'First') ? 'selected' : ''} value="First">First</option>
                      <option ${(nodeData.direction == 'Last') ? 'selected' : ''} value="Last">Last</option>
                    </select>
                    <label for="ss-value">Value</label>
                    <input class="u-full-width" type="number" id="ss-value" value="${(nodeData.value) ? nodeData.value : ''}">
                    </div>
                    </div>
                  </form>
                  <a class="button button-primary" id="ss-save" href="#">Save</a>
                  `;

        document.getElementById("settings-detail").innerHTML = inner;


        document.getElementById("ss-save").addEventListener("click", function (event) {
            event.preventDefault();
            
            nodeData.direction = document.getElementById("ss-direction").value;
            nodeData.value = document.getElementById("ss-value").value;
            nodeData.columns = parentData.columns;
            nodeData.source = parentData.source;

            editor.updateNodeDataFromId(id, nodeData);  

            myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
        });

      }

    function renameBuild(id, nodeData, parentData){

      let inner = `<form>
                  <div class="row">
                    <div class="column">
                      <label for="rn-column">Column</label>
                      <select class="u-full-width" id="rn-column">
                      </select>
                      <label for="rn-value">Value</label>
                      <input class="u-full-width" type="text" id="rn-value" value="${(nodeData.value) ? nodeData.value : ''}">
                    </div>
                    </div>
                  </form>
                  <a class="button button-primary" id="rn-save" href="#">Save</a>
                  `;

        document.getElementById("settings-detail").innerHTML = inner;

        // console.log(parentData);

        parentData.columns[0].forEach(function(element) {
        var x = document.getElementById("rn-column");
          var option = document.createElement("option");
          option.text = element;
          option.value = element;

          if (element == nodeData.column) {
            option.selected = true;
          }

          x.add(option);
      });


        document.getElementById("rn-save").addEventListener("click", function (event) {
            event.preventDefault();

            
            nodeData.column = document.getElementById("rn-column").value;
            nodeData.value = document.getElementById("rn-value").value;

            let newColumns = [];
            let endColumn = [];

            parentData.columns[0].forEach(function(element) {
                if (element == nodeData.column) {
                  newColumns.push(parentData.source + "." + nodeData.value);
                  // newColumns.push(nodeData.value);
                } else {
                  newColumns.push(element);
                }
            });

            endColumn.push(newColumns);

            nodeData.columns = endColumn;
            nodeData.columnsorginal = parentData.columns;
            nodeData.source = parentData.source;

            editor.updateNodeDataFromId(id, nodeData);  

            myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
        });

      }
    
      function selectBuild(id, nodeData, parentData){

        let inner = `<form>
                    <div class="row">
                      <div class="column">
                        <select class="u-full-width" multiple id="js-choice"></select>
                      </div>
                      </div>
                    </form>
                    
                    <a class="button button-primary" id="mr-save" href="#">Save</a>
                    `;

          document.getElementById("settings-detail").innerHTML = inner;

          const element = document.querySelector('#js-choice');

          // Calling a method directly
          const choices = new Choices(element, {
            // addItems: true,
            // removeItems: true,
            removeItemButton: true,
          });

          // const choices = new Choices(element);

          // choices.setValue(['Set value 1', 'Set value 2']);
          // choices.setValue(parentData.columns[0]);


            // console.log(parentData.columns[0]);

            // let loadList = [];

            let newList = [];

          parentData.columns[0].forEach(function(element) {
            newList.push(
              { value: element, label: element, disabled: false, selected: false },
            );

          });

          choices.setChoices(newList);

          if (typeof nodeData.columns != 'undefined' ) {
              nodeData.columns[0].forEach(function(element) {
                choices.setChoiceByValue(element);
            })
           }

          document.getElementById("mr-save").addEventListener("click", function (event) {
              event.preventDefault();

              let values = choices.getValue(true);

              // console.log(values);


              // let selectedColumns = [];
              // let keptColumns = [];

              let endColumn = [];
              // let inputs = document.getElementsByClassName("mr");

              // for(var i = 0; i < inputs.length; i++) {
              //   if(inputs[i].type == "checkbox") {

              //       if (inputs[i].checked == true) {
              //         selectedColumns.push(inputs[i].name);
              //       } 
              //       // else {
              //       //   keptColumns.push(inputs[i].name);
              //       // }

                    
              //   }  
              // }

              endColumn.push(values);

              // nodeData.selectedcolumns = selectedColumns;
              nodeData.columns = endColumn;
              nodeData.columnsorginal = parentData.columns;
              nodeData.source = parentData.source;

              editor.updateNodeDataFromId(id, nodeData);  

              // console.log(nodeData);

              myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });

              
          });

        }

    function joinBuild(id, nodeData, parentDataA, parentDataB){

      let inner = `<form>
        <div class="row">
          <div class="column">
            <label for="jn-join">Join Type</label>
            <select class="u-full-width" id="jn-join">
              <option ${(nodeData.join == 'Inner') ? 'selected' : ''} value="Inner">Inner</option>
              <option ${(nodeData.join == 'Left') ? 'selected' : ''} value="Left">Left</option>
            </select>
            <label for="jn-table-a" id="table-a-labal">table a</label>
            <select class="u-full-width" id="jn-table-a">
            </select>
            <label for="jn-table-b" id="table-b-labal">table b</label>
            <select class="u-full-width" id="jn-table-b">
            </select>
            
          </div>
          </div>
        <div class="row"></div>
        </form>
        <a class="button button-primary" id="jn-save" href="#">Save</a>
        `;

        document.getElementById("settings-detail").innerHTML = inner;

        document.getElementById("table-a-labal").innerText = "Table: " + parentDataA.source;
      
        parentDataA.columns[0].forEach(function(element) {
          var x = document.getElementById("jn-table-a");
            var option = document.createElement("option");
            option.text = element;
            option.value = element;

            if (element == nodeData.columna) {
              option.selected = true;
            }

            x.add(option);
        });

        document.getElementById("table-b-labal").innerText = "Table: " + parentDataB.source;

        parentDataB.columns[0].forEach(function(element) {
          var x = document.getElementById("jn-table-b");
            var option = document.createElement("option");
            option.text = element;
            option.value = element;

            if (element == nodeData.columnb) {
              option.selected = true;
            }

            x.add(option);
        });

        document.getElementById("jn-save").addEventListener("click", function (event) {
            event.preventDefault();

            nodeData.columna = document.getElementById("jn-table-a").value;
            nodeData.columnb = document.getElementById("jn-table-b").value;
            nodeData.join = document.getElementById("jn-join").value;
                      
            let keptColumns = [];
            let endColumn = [];

            parentDataA.columns[0].forEach(function(element) {

              // if (element == nodeData.columna) {
              //   keptColumns.push(nodeData.columna + "_" + nodeData.columnb);
              // } else {

                if (parentDataB.columns[0].includes(element)) {
                  // keptColumns.push(element + "_0");
                  keptColumns.push(parentDataA.source + "." + element);
                } else {
                  keptColumns.push(element);
                }

                
              // }

            });

            parentDataB.columns[0].forEach(function(element) {

              // if (element != nodeData.columnb) {

                if (parentDataA.columns[0].includes(element)) {
                  // keptColumns.push(element + "_1");
                  keptColumns.push(parentDataB.source + "." + element);
                } else {
                  keptColumns.push(element);
                }

                // keptColumns.push(element + "_1");
              // }
            });

            endColumn.push(keptColumns);

            nodeData.columns = endColumn;

            nodeData.columnsorginala = parentDataA.columns;
            nodeData.columnsorginalb = parentDataB.columns;
            nodeData.sourcea = parentDataA.source;
            nodeData.sourceb = parentDataB.source;
            nodeData.source = parentDataA.source+ ":" + parentDataB.source;

            editor.updateNodeDataFromId(id, nodeData);

            myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
        });

      }

      let dataTableGroup;
    
      function deleteRowAggs(rowId) {
                  console.log(rowId);
                  dataTableGroup.rows().remove(rowId);
                  document.getElementById("ag-optionscount").value = dataTableGroup.data.length;
                }
    
    
      function groupbyBuild(id, nodeData, parentData){

          let inner = `<form>
                      <div class="row">
                        <div class="column">
                          <select class="u-full-width" multiple id="js-choice"></select>
                        </div>
                        </div>
                        <div class="row">
                        <div class="column">
                          <label for="ag-agtype">Aggregate</label>
                            <select class="u-full-width" id="ag-agtype">
                              <option ${(nodeData.agtype == 'SUM') ? 'selected' : ''} value="SUM">SUM</option>
                              <option ${(nodeData.agtype == 'COUNT') ? 'selected' : ''} value="COUNT">COUNT</option>
                            </select>
                          <label for="ag-column">Column</label>
                          <select class="u-full-width" id="ag-column">
                          </select>
                        </div>
                        </div>
                      </div>
                      </form>
                      <input class="u-full-width" type="number" id="ag-optionscount" value="${(nodeData.optionscount) ? nodeData.optionscount : '0'}">
                      <div id="additionRows">
                        <a class="button button-primary" id="ag-add" href="#">Add</a>
                        <table id="filter-table"><thead>
                          <tr>
                            <th>Aggregate</th>
                            <th>Column</th>
                            <th>Delete</th>
                          </tr>
                        </thead><tbody></tbody></table>
                      </div>
                      <a class="button button-primary" id="gp-save" href="#">Save</a>
                      `;

            document.getElementById("settings-detail").innerHTML = inner;

            const element = document.querySelector('#js-choice');

          // Calling a method directly
          const choicesGroup = new Choices(element, {
            // const choices = new Choices(element, {
            // addItems: true,
            // removeItems: true,
            removeItemButton: true,
          });

          let newList = [];

          parentData.columns[0].forEach(function(element) {

            newList.push(
              { value: element, label: element, disabled: false, selected: false },
            );

          var x = document.getElementById("ag-column");
            var option = document.createElement("option");
            option.text = element;
            option.value = element;

            if (element == nodeData.column) {
              option.selected = true;
            }

            x.add(option);
        });

        choicesGroup.setChoices(newList);

        if (typeof nodeData.groupcolumns != 'undefined' ) {
              nodeData.groupcolumns[0].forEach(function(element) {
                choicesGroup.setChoiceByValue(element);
            })
           }
            

           dataTableGroup = new simpleDatatables.DataTable("#filter-table", {
                searchable: false,
                fixedHeight: false,
            });

            // function deleteAgg(rowId) {
            //   console.log(rowId);
            // }

            if (typeof nodeData.aggs != 'undefined' ) {

              // if (nodeData.aggs.length > 1) {
                // document.getElementById("additionRows").hidden = false;

                for (var i = 0; i < nodeData.aggs.length; i++) {

                  dataTableGroup.rows().add([
                        nodeData.aggs[i].agtype,
                        nodeData.aggs[i].column,
                        `<button type='button' onclick="deleteRowAggs(${i})" data-row='${i}'>Y</button>`,
                  ]);

                  document.getElementById("ag-optionscount").value = dataTableGroup.data.length;

                }

              // } else {
                  document.getElementById("ag-agtype").value = nodeData.aggs[0].agtype;
                  document.getElementById("ag-column").value = nodeData.aggs[0].column;
              // }
              }
           

            document.getElementById("ag-add").addEventListener("click", function (event) {
                event.preventDefault();

                

                dataTableGroup.rows().add([
                      document.getElementById("ag-agtype").value,
                      document.getElementById("ag-column").value,
                      `<button type='button' onclick="deleteRowAggs(${dataTableGroup.data.length})" data-row='${dataTableGroup.data.length}'>Y</button>`,
                  ]);

                  // ${datatable.rows().remove(dataTable.data.length)}

                  document.getElementById("ag-optionscount").value = dataTableGroup.data.length;


            });

            // document.getElementById(`delete-agg-0`).addEventListener("click", function (event) {
            //         datatable.rows().remove(dataTable.data.length);
            //       })

            document.getElementById("gp-save").addEventListener("click", function (event) {
                event.preventDefault();
                // let selectedColumns = [];
                let values = choicesGroup.getValue(true);
                let valuesB = choicesGroup.getValue(true);
                let endColumn = [];
                let newCols = [];

                endColumn.push(values);
                
                // need to add the agg columns to this
                // nodeData.columns = endColumn;
                nodeData.groupcolumns = endColumn;
                nodeData.columnsorginal = parentData.columns;
                nodeData.source = parentData.source;
                nodeData.aggs = [];

                // console.log("END-COLUMN");
                // console.log(endColumn);

                for (var i = 0; i < dataTableGroup.data.length; i++) {
                    let d = [].slice.call(dataTableGroup.data[i].cells).map(function(cell) { return cell.textContent;});
                    let mapp = {
                      "agtype" : d[0],
                      "column": d[1],
                    }
                    nodeData.aggs.push(mapp);
                    valuesB.push(mapp.column + "." + d[0]);
                  }

                newCols.push(valuesB);
                nodeData.columns = newCols;

                // console.log(nodeData);

                editor.updateNodeDataFromId(id, nodeData);  

                myOffsideRight.close();

              notie.alert({ type: 'success', text: 'Added Setting to Command', time: 1 });
            });

          }


  </script>
</body>
</html>